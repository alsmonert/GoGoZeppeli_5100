/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Customer;

import Business.Airliner.Airliner;
import Business.Airliner.AirlinerDirectory;
import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.Customer.Ticket;
import Business.Schedule.Flight;
import Business.Schedule.FlightSchedule;
import Business.TravelOffice;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MS
 */
public class BookCustomerFlightJPanel extends javax.swing.JPanel {

    /**
     * Creates new form Book
     */
    private JPanel travelAgencyCL;
    private Customer customer;
    private AirlinerDirectory ad;
    private FlightSchedule fs;
    public BookCustomerFlightJPanel(JPanel travelAgencyCL,Customer customer,FlightSchedule fs, AirlinerDirectory ad) {
        initComponents();
        this.travelAgencyCL = travelAgencyCL;
        this.customer = customer;
        this.fs = fs;
        this.ad = ad;
        refreshComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void refreshComboBox() {
        airlinerCB.removeAllItems();
        airlinerCB.addItem("default");

        for (Airliner a : ad.getAirlinerDir()) {
            airlinerCB.addItem(a.getName());
        }
        preferredTimeCB.removeAllItems();
        preferredTimeCB.addItem("default");
        preferredTimeCB.addItem("Morning");
        preferredTimeCB.addItem("Daytime");
        preferredTimeCB.addItem("Evening");
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tbnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchFlight = new javax.swing.JTable();
        preferredTimeCB = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        airlinerCB = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        dateTF = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        departureTF = new javax.swing.JTextField();
        destinationTF = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        jLabel6.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        jLabel6.setText("The Search Result As following:");

        jLabel1.setFont(new java.awt.Font("Consolas", 0, 36)); // NOI18N
        jLabel1.setText("Book Flight");

        tbnSearch.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        tbnSearch.setText("Search");
        tbnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbnSearchActionPerformed(evt);
            }
        });

        tblSearchFlight.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        tblSearchFlight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight", "From", "To", "Date", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSearchFlight);

        preferredTimeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        jLabel8.setText("Destination");

        airlinerCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        jLabel9.setText("Preferred Time");

        jLabel10.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        jLabel10.setText("Airliner");

        jLabel11.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        jLabel11.setText("Departure");

        jLabel12.setFont(new java.awt.Font("Consolas", 0, 24)); // NOI18N
        jLabel12.setText("Date");

        btnNext.setText("next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnBack.setText("back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(tbnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(departureTF)
                            .addComponent(destinationTF)
                            .addComponent(dateTF)
                            .addComponent(airlinerCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(preferredTimeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNext)
                        .addGap(59, 59, 59))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(departureTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(destinationTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(dateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(preferredTimeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(airlinerCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(tbnSearch)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext)
                    .addComponent(btnBack))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbnSearchActionPerformed
        // TODO add your handling code here:
        
        String departure = departureTF.getText();
        if (departure.isEmpty()) {
            departure = "default";
        }
        String destination = destinationTF.getText();
        if (destination.isEmpty()) {
            destination = "default";
        }
        String date = dateTF.getText();
        if (!date.isEmpty()) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            try {
                sdf.parse(dateTF.getText());
            } catch (Exception exc) {
                JOptionPane.showMessageDialog(this, "Please fill the date in yyyy-MM-dd format into date field!!");
                return;
            }
            try {
                sdf.setLenient(false);
                sdf.parse(dateTF.getText());
            } catch (Exception exc) {
                JOptionPane.showMessageDialog(this, "Date is illegal!!!");
                return;
            }
        } else {
            date = "default";
        }
        
        String time = (String) preferredTimeCB.getSelectedItem();
        String airliner = (String) airlinerCB.getSelectedItem();
        String[] info = {departure, destination, date, time, airliner};
        ArrayList<Flight> searchResult;
        searchResult = filterSchedule(info,fs);
        populateSearchTable(searchResult);
        
    }
    private ArrayList<Flight> filterSchedule(String[] info,FlightSchedule FS) {
        FlightSchedule resultFS = FS;
        String departure = info[0];
        String destination = info[1];
        String date = info[2];
        String time = info[3];
        String airliner = info[4];

        if (!departure.equals("default")) {
            try {
                resultFS = resultFS.filterDeparture(departure);
            } catch (Exception e) {
            }
        }
        if (!destination.equals("default")) {
            try {
                resultFS = resultFS.filterDestination(destination);
            } catch (Exception e) {
            }
        }
        if (!date.equals("default")) {
            try {
                resultFS = resultFS.filterDate(date);
            } catch (Exception e) {
            }
        }
        if (!date.equals("default")) {
            try {
                resultFS = resultFS.filterDate(date);
            } catch (Exception e) {
            }
        }
        if (!time.equals("default")) {
            try {
                resultFS = resultFS.filterTime(time);
            } catch (Exception e) {
            }
        }
        if (!airliner.equals("default")) {
            try {
                resultFS = resultFS.filterAirliner(airliner);
                System.out.println(resultFS.getFlightDir().get(0));
            } catch (Exception e) {
            }
        }
        return resultFS.getFlightDir();
    }
        private void populateSearchTable(ArrayList<Flight> searchResult){
            DefaultTableModel dtm = (DefaultTableModel) tblSearchFlight.getModel();
            dtm.setRowCount(0);
            for(Flight flight: searchResult){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0] = flight;
                row[1] = flight.getDeparture();
                row[2] = flight.getDestination();
                Date date = flight.getDate();  
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
                String strDate = dateFormat.format(date);
                row[3] = strDate;
                row[4] = flight.getTime();
                dtm.addRow(row);    
        }
    }//GEN-LAST:event_tbnSearchActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblSearchFlight.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row of the first table to view details.","Warning",JOptionPane.WARNING_MESSAGE);
        }
        
        else{
            Flight f = (Flight)tblSearchFlight.getValueAt(selectedRow,0);
            if (!customer.getTicketList().isEmpty()){
            for(Ticket t : customer.getTicketList()){
                if (t.getFlight().getTime().equals(f.getTime()) && t.getFlight().getDate().equals(f.getDate())){
                    JOptionPane.showMessageDialog(null, "You can not book an overlapped ticket!");
                    return;
                }
            }}
            SelectCustomerSeatJPanel panel = new SelectCustomerSeatJPanel(travelAgencyCL,f,customer);
            travelAgencyCL.add("SelectCustomerSeatJPanel",panel);
            CardLayout layout = (CardLayout) travelAgencyCL.getLayout();
            layout.next(travelAgencyCL);      
        } 
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        travelAgencyCL.remove(this);
        CardLayout layout = (CardLayout) travelAgencyCL.getLayout();
        layout.previous(travelAgencyCL);
    }//GEN-LAST:event_btnBackActionPerformed
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox airlinerCB;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNext;
    private javax.swing.JTextField dateTF;
    private javax.swing.JTextField departureTF;
    private javax.swing.JTextField destinationTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox preferredTimeCB;
    private javax.swing.JTable tblSearchFlight;
    private javax.swing.JButton tbnSearch;
    // End of variables declaration//GEN-END:variables
}
